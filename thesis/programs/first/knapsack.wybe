type item {
    pub item(weight:int, value:int)
}

resource sack:list(int)

def init_sack(capacity:int) use ?sack {
    if { capacity <= 0 :: 
        ?sack = [0]
    | else ::
        !init_sack(capacity - 1)
        ?sack = [0 | sack]
    }
}

def knapsack(capacity:int, item:item) use !sack {
    !map_add_item(item, 0..(capacity + 1), ?sack)
}

def add_item(item:item, weight:int, ?cost:int) use sack {
    ?cost = 0
    if { sack[weight] = ?cost ::
        if { sack[weight - item^weight] = ?prev_cost :: 
            ?cost = max(item^value + prev_cost, cost)
        }
    }
}

def map_knapsack(capacity:int, items:list(item)) use !sack {
    if { items = [?item | ?items] ::
        !knapsack(capacity, item)
        !map_knapsack(capacity, items)
    }
}

def map_add_item(item:item, r:range, ?values:list(int)) use sack {
    ?values = []
    for ?i in r {
        !add_item(item, i, ?value)
        ?values = [value | values]
    }
    ?values = reverse(values)
}

use sack in {
    !read(?capacity)
    !read(?n)

    ?items = []
    for _ in 0..n {
        !read(?weight)
        !read(?value)
        ?items = [item(weight, value) | items]
    }
    
    !init_sack(capacity)
    !map_knapsack(capacity, items)
    if { sack[capacity] = ?solution :: 
        !println(solution)
    }
}
